// Code generated by MockGen. DO NOT EDIT.
// Source: ./statemanager.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	reflect "reflect"

	entity "github.com/GianOrtiz/k8s-transparent-checkpoint-restore/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockStateManagerService is a mock of StateManagerService interface.
type MockStateManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockStateManagerServiceMockRecorder
}

// MockStateManagerServiceMockRecorder is the mock recorder for MockStateManagerService.
type MockStateManagerServiceMockRecorder struct {
	mock *MockStateManagerService
}

// NewMockStateManagerService creates a new mock instance.
func NewMockStateManagerService(ctrl *gomock.Controller) *MockStateManagerService {
	mock := &MockStateManagerService{ctrl: ctrl}
	mock.recorder = &MockStateManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateManagerService) EXPECT() *MockStateManagerServiceMockRecorder {
	return m.recorder
}

// SaveMetadata mocks base method.
func (m *MockStateManagerService) SaveMetadata(containerName string, metadata *entity.ContainerMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetadata", containerName, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetadata indicates an expected call of SaveMetadata.
func (mr *MockStateManagerServiceMockRecorder) SaveMetadata(containerName, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetadata", reflect.TypeOf((*MockStateManagerService)(nil).SaveMetadata), containerName, metadata)
}
